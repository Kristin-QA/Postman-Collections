{
	"info": {
		"_postman_id": "7c765d8f-1c7d-49af-953c-7fe8967b89ef",
		"name": "PetStore ( STORE ) Advanced",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19022718"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.clear() //will claer ALL ENV",
									"",
									"pm.environment.set(\"ID\", Math.floor(Math.random() * 101)); ",
									"",
									"pm.environment.set(\"PET_ID\", Math.floor(Math.random() * 101)); ",
									"",
									"pm.environment.set(\"QUANT\", Math.floor(Math.random() * 101)); ",
									"",
									"pm.environment.set(\"SHIP_DATE\", new Date ()); ",
									"",
									"// check Status",
									"let StatusPic = [\"placed\", \"approved\", \"delivered\"];",
									"let randomStatus = StatusPic[Math.floor(Math.random() * StatusPic.length)];",
									"pm.environment.set (\"STATUS\", randomStatus);",
									"",
									"let CompletePic = [true, false];",
									"let randomComplete = CompletePic[Math.floor(Math.random() * CompletePic.length)];",
									"pm.environment.set (\"COMPLETE\", randomComplete);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response size is less than 2KB\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");",
									"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");",
									"});",
									"",
									"",
									"pm.test(\"Body has all keys\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"petId\");",
									"    pm.expect(pm.response.text()).to.include(\"quantity\");",
									"    pm.expect(pm.response.text()).to.include(\"shipDate\");",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"    pm.expect(pm.response.text()).to.include(\"complete\");",
									"",
									"});",
									"     ",
									"",
									"pm.test(\"ID is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
									"});",
									"",
									"pm.test(\"PetId is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PET_ID\"));",
									"});",
									"",
									"pm.test(\"Quantity is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QUANT\"));",
									"});",
									"",
									"//Teme is not good to check, will be changed everry time",
									"//pm.test(\"ShipDateis correct\", function () {",
									"   // var jsonData = pm.response.json();",
									"    //pm.expect(jsonData.shipDate).to.eql(pm.environment.get(\"SHIP_DATE\"));",
									"//});",
									"",
									"pm.test(\"Status is  correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));",
									"});",
									"",
									"pm.test(\"Order is not been shipped yet\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));",
									"});",
									"",
									"pm.test(\"Response should be ok to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody (\"Error\");",
									"});",
									"",
									"",
									"pm.test(\"Body has ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body has matched key and value\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.id === (\"{{ID}}\");",
									"});",
									"",
									"// Chai collection .a",
									"pm.test(\"Response Body should be in the correct format \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.petId).to.be.a(\"number\");",
									"    pm.expect(jsonData.quantity).to.be.a(\"number\");",
									"    pm.expect(jsonData.shipDate).to.be.a(\"string\");",
									"    pm.expect(jsonData.status).to.be.a(\"string\");",
									"    pm.expect(jsonData.complete).to.be.a(\"boolean\");",
									"});",
									"",
									" if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"the instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = true;",
									"        break;",
									"    case 404:",
									"        tests[\"404 Not found\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 BUnauthorized\"] = false;",
									"        break;",
									"    case 500:",
									"        tests[\"500 Internal Server Error\"] = false;",
									"        break;",
									"    case 503:",
									"        tests[\"503 Server unavailable\"] = false;",
									"        break;",
									"    case 502:",
									"        tests[\"502 bad gateway\"] = false;",
									"        break;",
									"    case 599:",
									"        tests[\"599 Network connect timeout error\"] = false;",
									"        break;",
									"    case 408:",
									"        tests[\"408 Request is timeout\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":{{ID}},\n    \"petId\": {{PET_ID}},\n    \"quantity\": {{QUANT}},\n    \"shipDate\": \"{{SHIP_DATE}}\",\n    \"status\": \"{{STATUS}}\",\n    \"complete\": {{COMPLETE}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response size is less than 2KB\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");",
									"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");",
									"});",
									"",
									"",
									"pm.test(\"Body has all keys\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"    pm.expect(pm.response.text()).to.include(\"petId\");",
									"    pm.expect(pm.response.text()).to.include(\"quantity\");",
									"    pm.expect(pm.response.text()).to.include(\"shipDate\");",
									"    pm.expect(pm.response.text()).to.include(\"status\");",
									"    pm.expect(pm.response.text()).to.include(\"complete\");",
									"",
									"});",
									"     ",
									"",
									"pm.test(\"ID is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
									"});",
									"",
									"pm.test(\"PetId is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PET_ID\"));",
									"});",
									"",
									"pm.test(\"Quantity is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QUANT\"));",
									"});",
									"",
									"//Teme is not good to check, will be changed everry time",
									"//pm.test(\"ShipDateis correct\", function () {",
									"   // var jsonData = pm.response.json();",
									"    //pm.expect(jsonData.shipDate).to.eql(pm.environment.get(\"SHIP_DATE\"));",
									"//});",
									"",
									"pm.test(\"Status is  correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));",
									"});",
									"",
									"pm.test(\"Order is not been shipped yet\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));",
									"});",
									"",
									"pm.test(\"Response should be ok to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody (\"Error\");",
									"});",
									"",
									"",
									"pm.test(\"Body has ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Body has matched key and value\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.id === (\"{{ID}}\");",
									"});",
									"",
									"// Chai collection .a",
									"pm.test(\"Response Body should be in the correct format \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a(\"number\");",
									"    pm.expect(jsonData.petId).to.be.a(\"number\");",
									"    pm.expect(jsonData.quantity).to.be.a(\"number\");",
									"    pm.expect(jsonData.shipDate).to.be.a(\"string\");",
									"    pm.expect(jsonData.status).to.be.a(\"string\");",
									"    pm.expect(jsonData.complete).to.be.a(\"boolean\");",
									"});",
									"",
									" if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"the instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = true;",
									"        break;",
									"    case 404:",
									"        tests[\"404 Not found\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 BUnauthorized\"] = false;",
									"        break;",
									"    case 500:",
									"        tests[\"500 Internal Server Error\"] = false;",
									"        break;",
									"    case 503:",
									"        tests[\"503 Server unavailable\"] = false;",
									"        break;",
									"    case 502:",
									"        tests[\"502 bad gateway\"] = false;",
									"        break;",
									"    case 599:",
									"        tests[\"599 Network connect timeout error\"] = false;",
									"        break;",
									"    case 408:",
									"        tests[\"408 Request is timeout\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response size is less than 2KB\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");",
									"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");",
									"});",
									"",
									"",
									"pm.test(\"Body has all keys\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"code\");",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"   ",
									"});",
									"     ",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.test(\"Deletion code is correct\", function () {",
									"    pm.expect(jsonData.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Deletion type is correct\", function () {",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"});",
									"",
									"pm.test(\"Deletion messageID is correct\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"\" + pm.environment.get(\"ID\")); // We changed here num from ENV to str from response by concatination",
									"});",
									"",
									"pm.test(\"Correct order is found\", function () {",
									"    pm.expect(jsonData.code).to.not.eql(400); ",
									"    pm.expect(jsonData.code).to.not.eql(404); ",
									"    pm.expect(jsonData.code).to.not.eql(500); ",
									"    pm.expect(jsonData.message).to.not.eql(\"Order Not Found\"); ",
									"    ",
									"});",
									"",
									"",
									"",
									"// Chai collection .a",
									"pm.test(\"Response Body should be in the correct format \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.be.a(\"number\");",
									"    pm.expect(jsonData.type).to.be.a(\"string\");",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"   ",
									"});",
									"",
									" if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"the instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = true;",
									"        break;",
									"    case 404:",
									"        tests[\"404 Not found\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 BUnauthorized\"] = false;",
									"        break;",
									"    case 500:",
									"        tests[\"500 Internal Server Error\"] = false;",
									"        break;",
									"    case 503:",
									"        tests[\"503 Server unavailable\"] = false;",
									"        break;",
									"    case 502:",
									"        tests[\"502 bad gateway\"] = false;",
									"        break;",
									"    case 599:",
									"        tests[\"599 Network connect timeout error\"] = false;",
									"        break;",
									"    case 408:",
									"        tests[\"408 Request is timeout\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that order was deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response size is less than 2KB\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");",
									"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");",
									"});",
									"",
									"",
									"pm.test(\"Body has all keys\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"code\");",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"    ",
									"});",
									"     ",
									"",
									"",
									"pm.test(\"Response should be ok to process\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    //pm.response.to.be.jsonBody (\"Error\");",
									"});",
									"",
									"",
									"",
									"// Chai collection .a",
									"pm.test(\"Response Body should be in the correct format \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.be.a(\"number\");",
									"    pm.expect(jsonData.type).to.be.a(\"string\");",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"   ",
									"});",
									"",
									" if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = false;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = true;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"the instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = false;",
									"        break;",
									"    case 404:",
									"        tests[\"404 Not found\"] = true;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 BUnauthorized\"] = false;",
									"        break;",
									"    case 500:",
									"        tests[\"500 Internal Server Error\"] = false;",
									"        break;",
									"    case 503:",
									"        tests[\"503 Server unavailable\"] = false;",
									"        break;",
									"    case 502:",
									"        tests[\"502 bad gateway\"] = false;",
									"        break;",
									"    case 599:",
									"        tests[\"599 Network connect timeout error\"] = false;",
									"        break;",
									"    case 408:",
									"        tests[\"408 Request is timeout\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete purchase order by ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response size is less than 2KB\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");",
									"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");",
									"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");",
									"});",
									"",
									"",
									"pm.test(\"Body has all keys\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"code\");",
									"    pm.expect(pm.response.text()).to.include(\"type\");",
									"    pm.expect(pm.response.text()).to.include(\"message\");",
									"   ",
									"});",
									"     ",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.test(\"Deletion code is correct\", function () {",
									"    pm.expect(jsonData.code).to.eql(404);",
									"});",
									"",
									"pm.test(\"Deletion type is correct\", function () {",
									"    pm.expect(jsonData.type).to.eql(\"unknown\");",
									"});",
									"",
									"pm.test(\"Deletion messageID is correct\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"Order Not Found\")",
									"});",
									"",
									"",
									"pm.test(\"Correct order is found\", function () {",
									"     pm.expect(jsonData.code).to.not.eql(200); ",
									"    pm.expect(jsonData.code).to.not.eql(400); ",
									"    pm.expect(jsonData.code).to.eql(404); ",
									"    pm.expect(jsonData.code).to.not.eql(500); ",
									"    pm.expect(jsonData.message).to.eql(\"Order Not Found\"); ",
									"    ",
									"});",
									"",
									"",
									"",
									"// Chai collection .a",
									"pm.test(\"Response Body should be in the correct format \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.be.a(\"number\");",
									"    pm.expect(jsonData.type).to.be.a(\"string\");",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"   ",
									"});",
									"",
									" if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = false;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = true;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"the instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = false;",
									"        break;",
									"    case 404:",
									"        tests[\"404 Not found\"] = true;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 BUnauthorized\"] = false;",
									"        break;",
									"    case 500:",
									"        tests[\"500 Internal Server Error\"] = false;",
									"        break;",
									"    case 503:",
									"        tests[\"503 Server unavailable\"] = false;",
									"        break;",
									"    case 502:",
									"        tests[\"502 bad gateway\"] = false;",
									"        break;",
									"    case 599:",
									"        tests[\"599 Network connect timeout error\"] = false;",
									"        break;",
									"    case 408:",
									"        tests[\"408 Request is timeout\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Place an order for a pet ( 'id' )",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":9223372036854775808,\n    \"petId\": 55,\n    \"quantity\": 555,\n    \"shipDate\": \"2022-01-04T19:52:37.447Z\",\n    \"status\": \"placed\",\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID ( 'id' )",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order/9223372036854775808",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order",
								"9223372036854775808"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place an order for a pet ( 'quantity' )",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 5,\n    \"petId\": 55,\n    \"quantity\":2147483648,\n    \"shipDate\": \"2022-01-04T19:52:37.447Z\",\n    \"status\": \"placed\",\n    \"complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID ( 'id' ) Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/store/order/9223372036854775808",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"store",
								"order",
								"9223372036854775808"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}